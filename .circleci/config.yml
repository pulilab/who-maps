version: 2.1

orbs:
  jira: circleci/jira@1.1.0
  cypress: cypress-io/cypress@1

jobs:
  build-and-test:
    docker:
      - image: circleci/python:3.7.6-stretch-node
        environment:
          PIPENV_VENV_IN_PROJECT: true
          PGHOST: 127.0.0.1
          PGUSER: postgres
          DATABASE_URL: ''
          CI_RUN: True
          ODK_SYNC_ENABLED: False
          REDIS_URL: 127.0.0.1
      - image: circleci/postgres:10.9-alpine-postgis-ram
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
      - image: circleci/redis:5-stretch

    working_directory: ~/who-maps

    steps:
      - checkout
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.7/site-packages

      - restore_cache:
          keys:
            - v6-dependencies-b-{{ checksum "django/requirements.txt" }}

      - restore_cache:
          keys:
            - v3-dependencies-f-{{ checksum "frontend/package.json" }}

      - run:
          name: install python reqs
          working_directory: ~/who-maps/django
          command: |
            sudo pip install pipenv
            pipenv install
            pipenv run pip install -r requirements.txt

      - run:
          name: install frontend reqs
          working_directory: ~/who-maps/frontend
          command: npm install

      - run:
          name: install mapshaper
          working_directory: ~/who-maps
          command: sudo npm install -g mapshaper

      - save_cache:
          paths:
            - "django/.venv"
            - "/usr/local/bin"
            - "/usr/local/lib/python3.7/site-packages"
          key: v6-dependencies-b-{{ checksum "django/requirements.txt" }}

      - save_cache:
          paths:
            - frontend/node_modules
          key: v3-dependencies-f-{{ checksum "frontend/package.json" }}

      - run:
          name: backend flake8
          working_directory: ~/who-maps/django
          command: pipenv run flake8

      - run:
          name: backend makemigrations
          working_directory: ~/who-maps/django
          command: |
            pipenv run python manage.py makemigrations --noinput

      - run:
          name: backend migrations
          working_directory: ~/who-maps/django
          command: |
            pipenv run python manage.py migrate

      - run:
          name: backend unit tests
          working_directory: ~/who-maps/django
          command: |
            pipenv run py.test --full-trace --timeout=180 --cov --cov-report html --cov-fail-under 100 --cov-report term-missing --cov-config .coveragerc

      - run:
          name: backend check for commited migrations
          working_directory: ~/who-maps/django
          command: |
            export TERM=xterm && ! git diff --name-status origin/development HEAD | grep /migrations/0 | grep "^A"

      - run:
          name: cypress tests
          working_directory: ~/who-maps/frontend
          command: npm run cy.run -- --spec "cypress/integration/*"

  deploy-dev:
    docker:
      - image: circleci/python:3.7.6-stretch
    working_directory: ~/who-maps
    steps:
      - checkout
      - run:
          name: Install fabric and pycrypto
          command: |
            sudo pip install pycrypto
            sudo pip install Fabric3==1.10.2.post3
      - run:
          name: Deploy Over SSH
          working_directory: ~/who-maps/django
          command: |
            fab dev deploy
          no_output_timeout: "20m"

  deploy-qa:
    docker:
      - image: circleci/python:3.7.6-stretch
    working_directory: ~/who-maps
    steps:
      - checkout
      - run:
          name: Install fabric and pycrypto
          command: |
            sudo pip install pycrypto
            sudo pip install Fabric3==1.10.2.post3
      - run:
          name: Deploy Over SSH
          working_directory: ~/who-maps/django
          command: |
            fab staging deploy
          no_output_timeout: "20m"

workflows:
  build-and-deploy:
    jobs:
      - build-and-test:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
      - deploy-dev:
          name: Dev Server Deployment
          requires:
            - build-and-test
          filters:
            branches:
              only: development
          post-steps:
            - jira/notify:
                environment_type: development
                job_type: deployment
                issue_regexp: '[A-Z0-9]{2,30}-[0-9]+'
                environment: DEV  # DEV, PROD, QA
      - deploy-qa:
          name: QA Server Deployment
          requires:
            - build-and-test
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/
          post-steps:
            - jira/notify:
                environment_type: staging
                job_type: deployment
                issue_regexp: '[A-Z0-9]{2,30}-[0-9]+'
                environment: QA  # DEV, PROD, QA
