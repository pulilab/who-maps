# -*- coding: utf-8 -*-
# Generated by Django 1.10.6 on 2017-11-29 11:39
from __future__ import unicode_literals

from django.db import migrations

project_structure = {
    "licenses": [
        "Public domain",
        "Non protective free and open source software (e.g. Apache)",
        "Protective free and open source software",
        "Freemium",
        "Proprietary"
    ],
    "applications": [
        "Client education and behavior change communication",
        "Sensors point-of-care diagnostics",
        "Registries and vital events tracking",
        "Data collection and reporting",
        "Electronic health records",
        "Electronic decision support (e.g. protocols, algorithms, checklists)",
        "Provider-to-provider communication (e.g. user group, consultations)",
        "Provider work planning and scheduling",
        "Human resource management",
        "Supply chain management",
        "Financial transactions and incentives"
    ],
    "interoperability_standards": [
        "ADX - Aggregate Data Exchange",
        "ATNA - Audit Trail and Node Authentication",
        "BPPC - Basic Patient Privacy Consents",
        "CDA - Clinical Document Architecture",
        "CSD - Care Services Discovery",
        "DICOM",
        "GS1",
        "HL7 v2",
        "HL7 v3",
        "mACM - Mobile Alert Communication Management",
        "MHD - Mobile Access to Health Documents",
        "PIX or PIXm - (Mobile) Patient Identifier Cross Reference",
        "PDQ or PDQm - (Mobile) Patient Demographics Query",
        "SDMX - Statistical Data and Metadata Exchange",
        "XDS - Cross-Enterprise Document Sharing",
        "XUA - Cross-Enterprise User Assertion",
        "HL7 FHIR",
        "SVS - Sharing Value Sets",
        "GML Geography Markup Language",
        "XForms",
        "SNOMED",
        "ICD-10",
        "ISO 3166",
        "ISCO 08",
        "ISCO 88",
        "LOINC",
        "RxNORM",
        "CIEL"
    ],
    "his_bucket": [
        "Census, population information & data warehouse",
        "Civil Registration and Vital Statistics",
        "Client applications",
        "Client communication system",
        "Clinical terminology and classifications",
        "Community Information System",
        "EHR and health information repositories",
        "Electronic Medical Record",
        "Emergency response system",
        "Facility Management Information System",
        "Geographic Information Systems",
        "Health finance and insurance",
        "Health Management Information System",
        "Human Resource Information System",
        "Identification registries and directories",
        "Knowledge Management",
        "Laboratory and Diagnostic System",
        "Learning and Training System",
        "Logistics Management Information System",
        "Pharmacy System",
        "Public health and disease surveillance",
        "Research information system",
        "Data interchange interoperability and accessibility",
        "Environmental monitoring systems",
    ],
    "hsc_challenges": [
        {
            "name": "Information",
            "challenges": [
                "Lack of population denominator",
                "Delayed reporting of events",
                "Lack of quality/reliable data",
                "Communication roadblocks",
                "Lack of access to information or data",
                "Insufficient utilization of data and information",
                "Lack of unique identifiers"
            ]
        },
        {
            "name": "Availability",
            "challenges": [
                "Insufficient supply of commodities",
                "Insufficient supply of services",
                "Insufficient supply of equipment",
                "Insufficient supply of qualified health workers",
            ]
        },
        {
            "name": "Quality",
            "challenges": [
                "Poor patient experience",
                "Insufficient health worker competence",
                "Low quality of health commodities",
                "Insufficient continuity of care",
                "Insufficient supportive supervision",
                "Poor adherence to guidelines"
            ]
        },
        {
            "name": "Acceptability",
            "challenges": [
                "Lack of alignment with local norms",
                "Not addressing individual beliefs and practices",
            ]
        },
        {
            "name": "Utilization",
            "challenges": [
                "Low demand for services",
                "Geographic inaccessibility",
                "Low adherence to treatments",
                "Loss to follow-up",
            ]
        },
        {
            "name": "Efficiency",
            "challenges": [
                "Inadequate workflow management",
                "Lack of inappropriate referrals",
                "Poor planning and coordination",
                "Delayed provision of care",
                "Inadequate access to transportation",
                "Inadequate prioritization of clients",
            ]
        }
    ],
}


def convert_static(apps, schema_editor):
    Licence = apps.get_model('project', 'Licence')
    for item in project_structure['licenses']:
        Licence.all_objects.create(name=item)

    Application = apps.get_model('project', 'Application')
    for item in project_structure['applications']:
        Application.all_objects.create(name=item)

    InteroperabilityStandard = apps.get_model('project', 'InteroperabilityStandard')
    for item in project_structure['interoperability_standards']:
        InteroperabilityStandard.all_objects.create(name=item)

    HISBucket = apps.get_model('project', 'HISBucket')
    for item in project_structure['his_bucket']:
        HISBucket.all_objects.create(name=item)

    HSCChallenge = apps.get_model('project', 'HSCChallenge')
    for item in project_structure['hsc_challenges']:
        for challenge in item['challenges']:
            HSCChallenge.all_objects.create(name=item['name'], challenge=challenge)



class Migration(migrations.Migration):

    dependencies = [
        ('project', '0026_application_hisbucket_hscchallenge_interoperabilitystandard_licence'),
    ]

    operations = [
        migrations.RunPython(convert_static)
    ]
